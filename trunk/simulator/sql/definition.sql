--insert into creatures_products_snapshots (creature_snapshot_id, produced, needs)  values (:1, :2, :3);

--insert into creatures_resources_snapshots (creature_snapshot_id, use)  values (:1, :2); 
--insert into worlds_snapshots (world_run_id, snapshot_time) values (1, date('now'));

--select * from SQLITE_SEQUENCE;

drop table if exists WORLDS;
create table WORLDS (
    ID INTEGER CONSTRAINT WORLDS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
    JSON_DEF TEXT
);

drop table if exists WORLDS_RUNS;
create table WORLDS_RUNS (
    ID INTEGER CONSTRAINT WORLDS_RUNS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
    WORLD_ID INTEGER CONSTRAINT WORLDS_FK REFERENCES WORLDS (ID) ON DELETE CASCADE,
    DATE_START DATE_TEXT,
    DATE_STOP DATE_TEXT,
    STOP_CASE TEXT
);

drop table  if exists WORLDS_SNAPSHOTS;
   create table WORLDS_SNAPSHOTS (
       ID INTEGER CONSTRAINT WORLDS_SNAPSHOTS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       WORLD_RUN_ID INTEGER CONSTRAINT WORLDS_RUNS_FK REFERENCES WORLDS_RUNS (ID) ON DELETE CASCADE,
       SNAPSHOT_TIME DATE_TEXT,
       DESCRIPTION TEXT
 );
  
 drop table  if exists  FIELDS_SNAPSHOTS;
CREATE TABLE FIELDS_SNAPSHOTS (
    ID INTEGER CONSTRAINT FIELDS_SNAPSHOTS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
    WORLD_SNAPSHOT_ID INTEGER CONSTRAINT WORLDS_SNAPSHOTS_FK REFERENCES WORLDS_SNAPSHOTS (ID) ON DELETE CASCADE,
    LAG REAL NOT NULL
);

drop table  if exists PRODUCTS;
   create table PRODUCTS (
       ID INTEGER CONSTRAINT PRODUCTS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
      WORLD_ID INTEGER CONSTRAINT WORLDS_FK REFERENCES WORLDS (ID) ON DELETE CASCADE,      
       NAME TEXT
 );

drop table  if exists  RESOURCES;
   create table RESOURCES (
       ID INTEGER CONSTRAINT RESOURCES_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       WORLD_ID INTEGER CONSTRAINT WORLDS_FK REFERENCES WORLDS (ID) ON DELETE CASCADE,      
       NAME TEXT
 );
   
  drop table  if exists  POPULATIONS_SNAPSHOTS;
  create table POPULATIONS_SNAPSHOTS (
       ID INTEGER CONSTRAINT POPULATIONS_SNAPSHOTS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       FIELD_SNAPSHOT_ID INTEGER CONSTRAINT FIELDS_SNAPSHOTS_FK REFERENCES FIELDS_SNAPSHOTS(ID) ON DELETE CASCADE,
       SPECIES TEXT
 );
 
 drop table  if exists CREATURES_SNAPSHOTS;
   create table CREATURES_SNAPSHOTS (
       ID INTEGER CONSTRAINT CREATURES_SNAPSHOTS_PK PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       POPULATION_SNAPSHOT_ID INTEGER CONSTRAINT POPULATIONS_SNAPSHOTS_FK REFERENCES POPULATIONS_SNAPSHOTS(ID) ON DELETE CASCADE,
       AGE INTEGER,
       OBJECTIVE_VALUE REAL,
       GENOME TEXT
 );
 
 drop table  if exists CREATURES_PRODUCTS_SNAPSHOTS;
 create table CREATURES_PRODUCTS_SNAPSHOTS (
	ID INTEGER  PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       CREATURE_SNAPSHOT_ID INTEGER CONSTRAINT CREATURES_SNAPSHOTS_FK REFERENCES CREATURES_SNAPSHOTS(ID) ON DELETE CASCADE,
       PRODUCT_ID INT,
       PRODUCED REAL,
       NEEDS REAL
 );
 drop table  if exists CREATURES_RESOURCES_SNAPSHOTS;
 create table CREATURES_RESOURCES_SNAPSHOTS (
 	ID INTEGER  PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       CREATURE_SNAPSHOT_ID INTEGER CONSTRAINT CREATURES_SNAPSHOTS_FK REFERENCES CREATURES_SNAPSHOTS(ID) ON DELETE CASCADE,
       RESOURCE_ID INT,
       USED REAL
  );
  
  drop table  if exists FIELDS_PRODUCTS_SNAPSHOTS;
   create table FIELDS_PRODUCTS_SNAPSHOTS (
	ID INTEGER  PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       FIELD_SNAPSHOT_ID INTEGER CONSTRAINT FIELDS_SNAPSHOTS_FK REFERENCES FIELDS_SNAPSHOTS(ID) ON DELETE CASCADE,
	PRODUCT_ID INT,
       PRICE REAL,
       QUANT REAL
 );
 
 drop table  if exists FIELDS_RESOURCES_SNAPSHOTS;
 create table FIELDS_RESOURCES_SNAPSHOTS (
 	ID INTEGER  PRIMARY KEY ASC AUTOINCREMENT NOT NULL,
       FIELD_SNAPSHOT_ID INTEGER CONSTRAINT RESOURCES_SNAPSHOTS_FK REFERENCES RESOURCES_SNAPSHOTS(ID) ON DELETE CASCADE,
       RESOURCE_ID INT,
       PRICE REAL,
       AMOUNT REAL
  );
  
 drop view V_WORLDS_RUNS;
CREATE VIEW V_WORLDS_RUNS AS select * from WORLDS_RUNS;

drop view V_WORLDS_SNAPSHOTS;
CREATE VIEW V_WORLDS_SNAPSHOTS AS select * from WORLDS_SNAPSHOTS;


drop view V_FIELDS_SNAPSHOTS;
create view V_FIELDS_SNAPSHOTS AS 
select * from FIELDS_SNAPSHOTS;

--select FS.ID ID,  FS.WORLD_SNAPSHOT_ID, LAG, COUNT(DISTINCT PS.ID)  AS SECIES_COUNT
--from FIELDS_SNAPSHOTS FS,  POPULATIONS_SNAPSHOTS PS
--WHERE FS.ID = PS.FIELD_SNAPSHOT_ID;



drop view V_POPULATIONS_SNAPSHOTS;
create view V_POPULATIONS_SNAPSHOTS as select * from POPULATIONS_SNAPSHOTS;

drop view v_fields_products_snapshots;
create view v_fields_products_snapshots as select * from fields_products_snapshots;

drop view v_fields_resources_snapshots;
create view v_fields_resources_snapshots as select * from fields_resources_snapshots;

drop view v_creatures_snapshots;
create view v_creatures_snapshots as select * from creatures_snapshots;